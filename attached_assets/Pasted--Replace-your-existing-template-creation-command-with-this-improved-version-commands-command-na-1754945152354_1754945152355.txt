# Replace your existing template creation command with this improved version

@commands.command(name="createtemplates", aliases=["templates"])
@commands.has_any_role(*ADMIN_ROLE_IDS)
async def create_sheets_templates(self, ctx):
    """Create Google Sheets templates with current player data for manual entry."""
    if not hasattr(self.data_manager, 'sheets_manager') or not self.data_manager.sheets_manager:
        await ctx.send("‚ùå Google Sheets not configured. Set environment variables and restart bot.")
        return

    try:
        # Send initial message
        status_msg = await ctx.send("üîÑ Creating Google Sheets templates... This may take a few minutes due to rate limiting.")
        
        # Gather current player data for template creation
        all_data = {
            "events": self.data_manager.load_json(FILES["EVENTS"], {}),
            "blocked": self.data_manager.load_json(FILES["BLOCKED"], {}),
            "results": self.results,
            "player_stats": self.data_manager.player_stats,
            "ign_map": self.data_manager.load_json(FILES["IGN_MAP"], {}),
            "absent": self.data_manager.load_json(FILES["ABSENT"], {}),
            "notification_preferences": self.data_manager.load_json("data/notification_preferences.json", {})
        }
        
        # Create templates with detailed results
        results = self.data_manager.sheets_manager.setup_templates(all_data)
        
        if not results.get("connected", False):
            await status_msg.edit(content="‚ùå Could not connect to Google Sheets. Check credentials.")
            return
        
        # Build detailed results message
        embed = discord.Embed(
            title="üìä Google Sheets Template Creation Results",
            color=discord.Color.green() if results.get("summary", {}).get("success_count", 0) >= 3 else discord.Color.orange()
        )
        
        # Add summary
        summary = results.get("summary", {})
        success_count = summary.get("success_count", 0)
        total_count = summary.get("total_count", 0)
        
        embed.add_field(
            name="üìà Summary",
            value=f"**{success_count}/{total_count}** templates created successfully",
            inline=False
        )
        
        # Add individual results
        template_status = []
        template_names = {
            "player_stats": "üìä Player Stats",
            "alliance_tracking": "üè∞ Alliance Tracking", 
            "dashboard": "üìã Dashboard",
            "current_teams": "üë• Current Teams"
        }
        
        for key, name in template_names.items():
            status = "‚úÖ" if results.get(key, False) else "‚ùå"
            template_status.append(f"{status} {name}")
        
        embed.add_field(
            name="üìù Template Status",
            value="\n".join(template_status),
            inline=False
        )
        
        # Add spreadsheet link if available
        if self.data_manager.sheets_manager.spreadsheet:
            sheets_url = self.data_manager.sheets_manager.spreadsheet.url
            embed.add_field(
                name="üîó Spreadsheet",
                value=f"[üìä Open Google Sheets]({sheets_url})",
                inline=False
            )
        
        # Add instructions
        if success_count > 0:
            embed.add_field(
                name="üìù Next Steps",
                value="‚Ä¢ Fill in player power ratings in Player Stats sheet\n‚Ä¢ Add match data manually\n‚Ä¢ Update alliance information\n‚Ä¢ All changes sync automatically",
                inline=False
            )
        
        # Add footer with timing info
        embed.set_footer(text="Templates created with rate limiting to prevent API errors")
        
        await status_msg.edit(content="", embed=embed)
        
    except Exception as e:
        logger.exception("Failed to create sheets templates")
        await ctx.send(f"‚ùå Failed to create templates: {str(e)[:100]}...")